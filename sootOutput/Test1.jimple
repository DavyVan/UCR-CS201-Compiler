public class Test1 extends java.lang.Object
{
    static long func1BB0ExeNum;
    static long func1BB1ExeNum;
    static long func1BB2ExeNum;
    static long func1BB3ExeNum;
    static long func1BB4ExeNum;
    static long func1BB5ExeNum;
    static long func1BB6ExeNum;
    static long func1BB7ExeNum;
    static long func1LastBlock;
    static long[] func1EdgeExeNumMatrix;
    static long mainBB0ExeNum;

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        long tmpLocal, ttmpLocal, tttmpLocal;
        long[] tmpArrayRef;
        float tmpFloat;
        java.io.PrintStream tmpRef;

        tmpArrayRef = newarray (long)[64];

        <Test1: long[] func1EdgeExeNumMatrix> = tmpArrayRef;

        tmpLocal = <Test1: long mainBB0ExeNum>;

        tmpLocal = tmpLocal + 1L;

        <Test1: long mainBB0ExeNum> = tmpLocal;

        args := @parameter0: java.lang.String[];

        staticinvoke <Test1: void func1(int)>(0);

        staticinvoke <Test1: void func1(int)>(95);

        tmpRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("+----------------------------------\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("| Basic Block Profiling\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("+----------------------------------\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("Method: <Test1: void main(java.lang.String[])>\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB0: ");

        tmpLocal = <Test1: long mainBB0ExeNum>;

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("Method: <Test1: void func1(int)>\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB0: ");

        tmpLocal = <Test1: long func1BB0ExeNum>;

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB1: ");

        tmpLocal = <Test1: long func1BB1ExeNum>;

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB2: ");

        tmpLocal = <Test1: long func1BB2ExeNum>;

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB3: ");

        tmpLocal = <Test1: long func1BB3ExeNum>;

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB4: ");

        tmpLocal = <Test1: long func1BB4ExeNum>;

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB5: ");

        tmpLocal = <Test1: long func1BB5ExeNum>;

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB6: ");

        tmpLocal = <Test1: long func1BB6ExeNum>;

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB7: ");

        tmpLocal = <Test1: long func1BB7ExeNum>;

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("+----------------------------------\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("| Edge Profiling\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("+----------------------------------\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("Method: <Test1: void func1(int)>\n");

        tmpArrayRef = <Test1: long[] func1EdgeExeNumMatrix>;

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB0 -> BB1:  ");

        tmpLocal = tmpArrayRef[1L];

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB0 -> BB2:  ");

        tmpLocal = tmpArrayRef[2L];

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB1 -> BB7:  ");

        tmpLocal = tmpArrayRef[15L];

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB2 -> BB3:  ");

        tmpLocal = tmpArrayRef[19L];

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB3 -> BB4:  ");

        tmpLocal = tmpArrayRef[28L];

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB3 -> BB5:  ");

        tmpLocal = tmpArrayRef[29L];

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB4 -> BB6:  ");

        tmpLocal = tmpArrayRef[38L];

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB5 -> BB3:  ");

        tmpLocal = tmpArrayRef[43L];

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("BB6 -> BB7:  ");

        tmpLocal = tmpArrayRef[55L];

        virtualinvoke tmpRef.<java.io.PrintStream: void println(int)>(tmpLocal);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("+----------------------------------\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("| Average Number Of Variables Live\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("| At An Executed Instruction\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("+----------------------------------\n");

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("Method: <Test1: void main(java.lang.String[])>\n");

        tmpFloat = 0.0F;

        tttmpLocal = 0L;

        tmpLocal = <Test1: long mainBB0ExeNum>;

        ttmpLocal = tmpLocal * 0L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        ttmpLocal = tmpLocal * 0L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        ttmpLocal = tmpLocal * 1L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        ttmpLocal = tmpLocal * 2L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        ttmpLocal = tmpLocal * 1L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        ttmpLocal = tmpLocal * 0L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        tmpFloat = tmpFloat / tttmpLocal;

        virtualinvoke tmpRef.<java.io.PrintStream: void println(float)>(tmpFloat);

        virtualinvoke tmpRef.<java.io.PrintStream: void print(java.lang.String)>("Method: <Test1: void func1(int)>\n");

        tmpFloat = 0.0F;

        tttmpLocal = 0L;

        tmpLocal = <Test1: long func1BB0ExeNum>;

        ttmpLocal = tmpLocal * 0L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        ttmpLocal = tmpLocal * 1L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        tmpLocal = <Test1: long func1BB1ExeNum>;

        ttmpLocal = tmpLocal * 0L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        tmpLocal = <Test1: long func1BB2ExeNum>;

        ttmpLocal = tmpLocal * 1L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        tmpLocal = <Test1: long func1BB3ExeNum>;

        ttmpLocal = tmpLocal * 1L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        ttmpLocal = tmpLocal * 1L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        ttmpLocal = tmpLocal * 2L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        tmpLocal = <Test1: long func1BB4ExeNum>;

        ttmpLocal = tmpLocal * 0L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        tmpLocal = <Test1: long func1BB5ExeNum>;

        ttmpLocal = tmpLocal * 1L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        ttmpLocal = tmpLocal * 1L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        ttmpLocal = tmpLocal * 1L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        ttmpLocal = tmpLocal * 1L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        tmpLocal = <Test1: long func1BB6ExeNum>;

        ttmpLocal = tmpLocal * 0L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        tmpLocal = <Test1: long func1BB7ExeNum>;

        ttmpLocal = tmpLocal * 0L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        ttmpLocal = tmpLocal * 0L;

        tmpFloat = tmpFloat + ttmpLocal;

        tttmpLocal = tttmpLocal + tmpLocal;

        tmpFloat = tmpFloat / tttmpLocal;

        virtualinvoke tmpRef.<java.io.PrintStream: void println(float)>(tmpFloat);

        return;
    }

    public static void func1(int)
    {
        int x, temp$0, temp$1;
        long tmpLocal, ttmpLocal;
        long[] tmpArrayRef;

        tmpLocal = <Test1: long func1BB0ExeNum>;

        tmpLocal = tmpLocal + 1L;

        <Test1: long func1BB0ExeNum> = tmpLocal;

        x := @parameter0: int;

        <Test1: long func1LastBlock> = 0L;

        if x != 0 goto label1;

        tmpLocal = <Test1: long func1BB1ExeNum>;

        tmpLocal = tmpLocal + 1L;

        <Test1: long func1BB1ExeNum> = tmpLocal;

        tmpLocal = <Test1: long func1LastBlock>;

        tmpLocal = tmpLocal * 8L;

        tmpLocal = tmpLocal + 1L;

        tmpArrayRef = <Test1: long[] func1EdgeExeNumMatrix>;

        ttmpLocal = tmpArrayRef[tmpLocal];

        ttmpLocal = ttmpLocal + 1L;

        tmpArrayRef[tmpLocal] = ttmpLocal;

        <Test1: long func1LastBlock> = 1L;

        goto label5;

     label1:
        tmpLocal = <Test1: long func1BB2ExeNum>;

        tmpLocal = tmpLocal + 1L;

        <Test1: long func1BB2ExeNum> = tmpLocal;

        tmpLocal = <Test1: long func1LastBlock>;

        tmpLocal = tmpLocal * 8L;

        tmpLocal = tmpLocal + 2L;

        tmpArrayRef = <Test1: long[] func1EdgeExeNumMatrix>;

        ttmpLocal = tmpArrayRef[tmpLocal];

        ttmpLocal = ttmpLocal + 1L;

        tmpArrayRef[tmpLocal] = ttmpLocal;

        <Test1: long func1LastBlock> = 2L;

     label2:
        tmpLocal = <Test1: long func1BB3ExeNum>;

        tmpLocal = tmpLocal + 1L;

        <Test1: long func1BB3ExeNum> = tmpLocal;

        temp$0 = x % 4;

        tmpLocal = <Test1: long func1LastBlock>;

        tmpLocal = tmpLocal * 8L;

        tmpLocal = tmpLocal + 3L;

        tmpArrayRef = <Test1: long[] func1EdgeExeNumMatrix>;

        ttmpLocal = tmpArrayRef[tmpLocal];

        ttmpLocal = ttmpLocal + 1L;

        tmpArrayRef[tmpLocal] = ttmpLocal;

        <Test1: long func1LastBlock> = 3L;

        if temp$0 != 0 goto label3;

        tmpLocal = <Test1: long func1BB4ExeNum>;

        tmpLocal = tmpLocal + 1L;

        <Test1: long func1BB4ExeNum> = tmpLocal;

        tmpLocal = <Test1: long func1LastBlock>;

        tmpLocal = tmpLocal * 8L;

        tmpLocal = tmpLocal + 4L;

        tmpArrayRef = <Test1: long[] func1EdgeExeNumMatrix>;

        ttmpLocal = tmpArrayRef[tmpLocal];

        ttmpLocal = ttmpLocal + 1L;

        tmpArrayRef[tmpLocal] = ttmpLocal;

        <Test1: long func1LastBlock> = 4L;

        goto label4;

     label3:
        tmpLocal = <Test1: long func1BB5ExeNum>;

        tmpLocal = tmpLocal + 1L;

        <Test1: long func1BB5ExeNum> = tmpLocal;

        temp$1 = x / 4;

        x = temp$1;

        tmpLocal = <Test1: long func1LastBlock>;

        tmpLocal = tmpLocal * 8L;

        tmpLocal = tmpLocal + 5L;

        tmpArrayRef = <Test1: long[] func1EdgeExeNumMatrix>;

        ttmpLocal = tmpArrayRef[tmpLocal];

        ttmpLocal = ttmpLocal + 1L;

        tmpArrayRef[tmpLocal] = ttmpLocal;

        <Test1: long func1LastBlock> = 5L;

        goto label2;

     label4:
        tmpLocal = <Test1: long func1BB6ExeNum>;

        tmpLocal = tmpLocal + 1L;

        <Test1: long func1BB6ExeNum> = tmpLocal;

        tmpLocal = <Test1: long func1LastBlock>;

        tmpLocal = tmpLocal * 8L;

        tmpLocal = tmpLocal + 6L;

        tmpArrayRef = <Test1: long[] func1EdgeExeNumMatrix>;

        ttmpLocal = tmpArrayRef[tmpLocal];

        ttmpLocal = ttmpLocal + 1L;

        tmpArrayRef[tmpLocal] = ttmpLocal;

        <Test1: long func1LastBlock> = 6L;

     label5:
        tmpLocal = <Test1: long func1BB7ExeNum>;

        tmpLocal = tmpLocal + 1L;

        <Test1: long func1BB7ExeNum> = tmpLocal;

        tmpLocal = <Test1: long func1LastBlock>;

        tmpLocal = tmpLocal * 8L;

        tmpLocal = tmpLocal + 7L;

        tmpArrayRef = <Test1: long[] func1EdgeExeNumMatrix>;

        ttmpLocal = tmpArrayRef[tmpLocal];

        ttmpLocal = ttmpLocal + 1L;

        tmpArrayRef[tmpLocal] = ttmpLocal;

        <Test1: long func1LastBlock> = 7L;

        return;
    }

    public void <init>()
    {
        Test1 this;

        this := @this: Test1;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }
}
